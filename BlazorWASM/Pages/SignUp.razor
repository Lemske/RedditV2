@page "/SignUp"
@using HttpClients.ServiceInterfaces
@using System.Reflection
@using global::Shared.DTOs
@inject IAuthService AuthService
@inject NavigationManager NavMgr
<AuthorizeView>
<NotAuthorized>
    <div class="card">
        <h3>Enter Information</h3>
        <div class="field">
            <label>Username</label>
            <input class=@_validationUsername type="text" @oninput="CheckUsername" placeholder="Username"/>
        </div>
        <div class="field">
            <label style="text-align: center">Password</label>
            <input class=@_validationPassword type="password" @oninput="CheckPassword" placeholder="Password" />
        </div>
        <div class="field">
            <label style="text-align: center">Email</label>
            <input class=@_validationEmail type="text" @oninput="CheckEmail" placeholder="E-Mail" />
        </div>
        <div class="field">
            <label style="text-align: center">Name</label>
            <input class=@_validationName type="text" @oninput="CheckName" placeholder="Name" />
        </div>
        <div class="field">
            <label style="text-align: center">Age</label>
            <input class=@_validationAge type="number" @oninput="CheckAge" placeholder="Age" /> 
        </div>
        @if (!string.IsNullOrEmpty(_errorLabel))
        {
            <div class="field">
                <label style="color: red">
                    @_errorLabel
                </label>
            </div>
        }
        <div class="field">
            <button class="loginbtn" style="background-color: rgb(@_redRgb,@_greenRgb,000); @_glow" @onclick="SignUpAsync">Sign Up</button>
        </div>
        <div>
            <a @onclick="Login">Login</a>
        </div>
    </div>
</NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>Hello, @context.User.Identity?.Name</h3>
        </div>
    </Authorized>
</AuthorizeView>

@code {
#pragma warning disable CS0649
    private string _username = null!;
    private string _password = null!;
    private string _email = null!;
    private string _name = null!;
    private int _age;
    
    private string _errorLabel = null!;
    private string _validationUsername; //
    private string _validationPassword;
    private string _validationEmail;
    private string _validationName;
    private string _validationAge;
    private const int MinUsernameCharacters = 4; //Disse to domainer brude også være på serverside, ser om jeg når
    private const int MinPasswordCharacters = 6;
    private const int MinEmailCharacters = 3; //Burde tjekke om @ og om noget er før efter og nok også .com/.dk bla bla
    private const int MinNameCharacters = 1;
    private const int MinAgeValue = 18; 
    private int _minUserCharReach; //Kan nok også gøres smartere, ser om jeg når til det
    private int _minPassCharReach;
    private int _minEmailCharReach;
    private int _minNameCharReach;
    private int _minAgeValueReach;
    
        private const int RgbTotal = 255;
    private int _redRgb;
    private int _greenRgb;
    private string _glow = null!;
    private const string Invalid = "invalid"; 
    private const string Valid = "valid";
    private bool _fillsMinimumReq;
#pragma warning restore CS0649

    public SignUp() //Spørgsmål til underviser: Er det normalt at lave constructer i page?
    {
        _validationUsername = Invalid;
        _validationPassword = Invalid;
        _validationEmail = Invalid;
        _validationName = Invalid;
        _validationAge = Invalid;
        
        _redRgb = RgbTotal;
        _greenRgb = 0;
        _fillsMinimumReq = false;
    }
    
    private void CheckUsername(ChangeEventArgs e)
    {
        Check(e, MinUsernameCharacters, nameof(_minUserCharReach), nameof(_username), nameof(_validationUsername));
    }
    
    private void CheckPassword(ChangeEventArgs e) 
    { 
        Check(e, MinPasswordCharacters, nameof(_minPassCharReach), nameof(_password), nameof(_validationPassword));
    }
    
    
    private void CheckEmail(ChangeEventArgs e) 
    { 
        Check(e, MinEmailCharacters, nameof(_minEmailCharReach), nameof(_email), nameof(_validationEmail));
    }
    
    
    private void CheckName(ChangeEventArgs e) 
    { 
        Check(e, MinNameCharacters, nameof(_minNameCharReach), nameof(_name), nameof(_validationName));
    }
    
    private void CheckAge(ChangeEventArgs e) //Burde lave general eller tage d.o.b.
    {
        string? soonInt = e.Value?.ToString();
        if (!string.IsNullOrEmpty(soonInt))
        {
            int age = int.Parse(e.Value!.ToString()!);
            if (age >= MinAgeValue)
            {
                _age = age;
                _validationAge = Valid;
            }
            else{
                _validationAge = Invalid;
            }
            _minAgeValueReach = Math.Clamp(age, 0, MinAgeValue);
        }else
        {
            _minAgeValueReach = 0;
        }
        LoginUnluck();
    }
    
    private void Check(ChangeEventArgs e, int minLengthRequirement, string reachChecker, string fieldToSet, string tagValidator)
    {
        var typedByUser = e.Value!.ToString()!;
        System.Diagnostics.Debug.WriteLine(typedByUser);
        var typedLength = typedByUser.Length;
        if(typedLength >= minLengthRequirement)
        {
            GetType().GetField(fieldToSet, BindingFlags.NonPublic | BindingFlags.Instance)!.SetValue(this, typedByUser);
            GetType().GetField(tagValidator, BindingFlags.NonPublic | BindingFlags.Instance)!.SetValue(this, Valid);
        } else
        {
            GetType().GetField(tagValidator, BindingFlags.NonPublic | BindingFlags.Instance)!.SetValue(this, Invalid);
        }
        GetType().GetField(reachChecker, BindingFlags.NonPublic | BindingFlags.Instance)!.SetValue(this, Math.Clamp(typedLength, 0, minLengthRequirement));
        LoginUnluck();
    }
    
    private void LoginUnluck()
    {
        double totalMinNumberOfCharsNeeded = MinPasswordCharacters + MinUsernameCharacters + MinEmailCharacters + MinNameCharacters + MinAgeValue;
        double combinedReached = _minPassCharReach + _minUserCharReach + _minEmailCharReach + _minNameCharReach + _minAgeValueReach;
        double stillNotReached = totalMinNumberOfCharsNeeded - combinedReached;
        _greenRgb = (int) (RgbTotal * (combinedReached / totalMinNumberOfCharsNeeded));
        _redRgb = (int) (RgbTotal * (stillNotReached / totalMinNumberOfCharsNeeded));
        if (_greenRgb == RgbTotal)
        {
            _glow = "box-shadow: 0 0 25px 4px 	#afffaf, 0 0 10px 5px 	#afff5f,0 0 25px 5px #afff00;"; //Dundet glow online, sidder og lejet med... ret sjov glow :)
            _fillsMinimumReq = true;
        }else
        {
            _glow = "";
            _fillsMinimumReq = false;
        }
    }   
    
    private async Task SignUpAsync()
    {
        _errorLabel = "";
        try
        {
            if (!_fillsMinimumReq)
                throw new Exception("All fields has to be done");
            //await AuthService.RegisterAsync(_username, _password, _email, _name, _age);
            await AuthService.RegisterAsync(new UserRegisterDTO()
            {
                Username = _username,
                Password = _password,
                Email = _email,
                Name = _name,
                Age = _age
            });
            NavMgr.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorLabel = $"Error: {e.Message}";
        }
    }
    private void Login()
    {
        NavMgr.NavigateTo("/Login");
    }
}
}